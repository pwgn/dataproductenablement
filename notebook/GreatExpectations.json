{
	"name": "GreatExpectations",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DataProduct",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c81cc72a-af55-4e1e-9ceb-7e3c58388c5d/resourceGroups/data-product-enablement/providers/Microsoft.Synapse/workspaces/dataproductenablement/bigDataPools/DataProduct",
				"name": "DataProduct",
				"type": "Spark",
				"endpoint": "https://dataproductenablement.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DataProduct",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import great_expectations as ge\n",
					"from great_expectations.core.batch import BatchRequest, RuntimeBatchRequest\n",
					"from great_expectations.data_context import BaseDataContext\n",
					"from great_expectations.data_context.types.base import (\n",
					"    InMemoryStoreBackendDefaults,\n",
					"    DataContextConfig, \n",
					"    DatasourceConfig, \n",
					"    FilesystemStoreBackendDefaults\n",
					")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# Example RuntimeDataConnector for use with a dataframe batch\n",
					"my_spark_datasource_config = DatasourceConfig(\n",
					"    class_name=\"Datasource\",\n",
					"    execution_engine={\n",
					"        \"class_name\": \"SparkDFExecutionEngine\"\n",
					"        \"azure_options\": {\n",
					"            \"account_url\": \"https://chrispstore.blob.core.windows.net/\",\n",
					"            \"credential\": \"0kERLDuhspa8LpIeEhQllsvBAOw9bOWhob/0sm319WgaJtHSxRTqh9jhKlSv90WsV/tWs06PLL2szXPVE69CQQ==\",\n",
					"        },\n",
					"    },\n",
					"    data_connectors={\n",
					"        \"default_inferred_data_connector_name\": {\n",
					"            \"class_name\": \"InferredAssetAzureDataConnector\",\n",
					"            \"azure_options\": {\n",
					"                \"account_url\": \"https://chrispstore.blob.core.windows.net/\",\n",
					"                \"credential\": \"0kERLDuhspa8LpIeEhQllsvBAOw9bOWhob/0sm319WgaJtHSxRTqh9jhKlSv90WsV/tWs06PLL2szXPVE69CQQ==\",\n",
					"            },\n",
					"            \"container\": \"lake\",\n",
					"            \"name_starts_with\": \"RAW\",\n",
					"            \"default_regex\": {\n",
					"                \"pattern\": \"(.*)\\\\.parquet\",\n",
					"                \"group_names\": [\"data_asset_name\"],\n",
					"            },\n",
					"        },\n",
					"    }\n",
					")\n",
					"\n",
					"data_context_config = DataContextConfig(\n",
					"    datasources={\"my_spark_datasource\": my_spark_datasource_config},\n",
					"    store_backend_defaults=FilesystemStoreBackendDefaults(root_directory=\"/tmp/GreatExpectations/\"),\n",
					")\n",
					"context = BaseDataContext(project_config=data_context_config)\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"context.add_datasource(**datasource_config)\n",
					"batch_request = BatchRequest(\n",
					"    datasource_name=\"my_azure_datasource\",\n",
					"    data_connector_name=\"default_inferred_data_connector_name\",\n",
					"    data_asset_name=\"GpuRaw\",\n",
					"    batch_spec_passthrough={\"reader_method\": \"parquet\", \"reader_options\": {\"header\": True}},\n",
					")\n",
					"\n",
					"context.create_expectation_suite(\n",
					"    expectation_suite_name=\"test_suite\", overwrite_existing=True\n",
					")\n",
					"validator = context.get_validator(\n",
					"    batch_request=batch_request, expectation_suite_name=\"test_suite\"\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Example RuntimeDataConnector for use with a dataframe batch\n",
					"my_spark_datasource_config = DatasourceConfig(\n",
					"    class_name=\"Datasource\",\n",
					"    execution_engine={\"class_name\": \"SparkDFExecutionEngine\"},\n",
					"    data_connectors={\n",
					"        \"insert_your_runtime_data_connector_name_here\": {\n",
					"            \"module_name\": \"great_expectations.datasource.data_connector\",\n",
					"            \"class_name\": \"RuntimeDataConnector\",\n",
					"            \"batch_identifiers\": [\n",
					"                \"some_key_maybe_pipeline_stage\",\n",
					"                \"some_other_key_maybe_run_id\"\n",
					"            ]\n",
					"        }\n",
					"    }\n",
					")\n",
					"\n",
					"data_context_config = DataContextConfig(\n",
					"    datasources={\"my_spark_datasource\": my_spark_datasource_config},\n",
					"    store_backend_defaults=FilesystemStoreBackendDefaults(root_directory=\"/tmp/GreatExpectations/\"),\n",
					")\n",
					"context = BaseDataContext(project_config=data_context_config)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# TODO: Load linked source \n",
					"#date_partition = 'year=2021/month=09/day=01'\n",
					"#RAW_PARQUET_PATH = 'abfss://lake@chrispstore.dfs.core.windows.net/RAW/gpu/{partition}/*.parquet'.format(partition = date_partition)\n",
					"df = spark.read.parquet('abfss://lake@chrispstore.dfs.core.windows.net/RAW/gpu/year=2021/month=09/day=01/All_GPUs - All_GPUs.parquet')\n",
					""
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# TODO: Paremeterize config ----\n",
					"import yaml\n",
					"\n",
					"store_backend_defaults = InMemoryStoreBackendDefaults()\n",
					"data_context_config = DataContextConfig(\n",
					"    store_backend_defaults=store_backend_defaults,\n",
					"    checkpoint_store_name=store_backend_defaults.checkpoint_store_name,\n",
					")\n",
					"context = BaseDataContext(project_config=data_context_config)\n",
					"\n",
					"datasource_yaml = f\"\"\"\n",
					"name: my_spark_dataframe\n",
					"class_name: Datasource\n",
					"execution_engine:\n",
					"    class_name: SparkDFExecutionEngine\n",
					"data_connectors:\n",
					"    module_name: great_expectations.datasource.data_connector\n",
					"    default_runtime_data_connector_name:\n",
					"        class_name: RuntimeDataConnector\n",
					"        batch_identifiers:\n",
					"            - batch_id\n",
					"\"\"\"\n",
					"# ------------\n",
					"\n",
					"context.test_yaml_config(datasource_yaml)\n",
					"\n",
					"#context.add_datasource(**yaml.load(datasource_yaml))"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Here is a RuntimeBatchRequest using a dataframe\n",
					"batch_request = RuntimeBatchRequest(\n",
					"    datasource_name=\"my_spark_datasource\",\n",
					"    data_connector_name=\"default_runtime_data_connector_name\",\n",
					"    data_asset_name=\"<YOUR_MEANGINGFUL_NAME>\",  # This can be anything that identifies this data_asset for you\n",
					"    batch_identifiers={\"batch_id\": \"default_identifier\"},\n",
					"    runtime_parameters={\"batch_data\": df_query},  # Your dataframe goes here\n",
					")"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# TODO: load suite\r\n",
					"\r\n",
					"context.create_expectation_suite(\r\n",
					"    expectation_suite_name=\"test_suite\", overwrite_existing=True\r\n",
					")\r\n",
					"\r\n",
					"validator = context.get_validator(\r\n",
					"    batch_request=batch_request, expectation_suite_name=\"test_suite\"\r\n",
					")"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"source": [
					"# TODO: checkpoints"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"source": [
					"%%pyspark\n",
					"\n",
					"# GG\n",
					"## TODO: Parametirize load source\n",
					"## how to support snowflake / other source types\n",
					"from pyspark.sql import SparkSession\n",
					"\n",
					"spark = SparkSession.builder \\\n",
					"    .getOrCreate()\n",
					"\n",
					"df = spark.read.parquet('abfss://lake@chrispstore.dfs.core.windows.net/RAW/gpu/year=2021/month=09/day=01/All_GPUs - All_GPUs.parquet')\n",
					"df._sc = spark._sc\n",
					"\n",
					"## TODO: add query - query put in batch config somehow!?\n",
					"\n",
					"df.show()"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"source": [
					"from great_expectations.data_context import BaseDataContext\n",
					"from great_expectations.data_context.types.base import (\n",
					"  DatasourceConfig,\n",
					"  DataContextConfig,\n",
					"  InMemoryStoreBackendDefaults,\n",
					"  FilesystemStoreBackendDefaults\n",
					")\n",
					"from great_expectations.core.batch import BatchRequest, RuntimeBatchRequest\n",
					""
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"source": [
					"%%pyspark\n",
					"# Create a DataContext in code from a DataContextConfig with DatasourceConfig\n",
					"# TODO: Parameterize what? Connector?\n",
					"my_spark_datasource_config = DatasourceConfig(\n",
					"    class_name=\"Datasource\",\n",
					"    execution_engine={\"class_name\": \"SparkDFExecutionEngine\"},\n",
					"    data_connectors={\n",
					"      \"insert_your_runtime_data_connector_name_here\": {\n",
					"        \"module_name\": \"great_expectations.datasource.data_connector\",\n",
					"        \"class_name\": \"RuntimeDataConnector\",\n",
					"        \"batch_identifiers\": [\n",
					"          \"batch_id\"\n",
					"        ]\n",
					"      }\n",
					"    }\n",
					"  )\n",
					"\n",
					"\n",
					"# TODO: Parameterize source name\n",
					"project_config = DataContextConfig(\n",
					"    datasources={\"insert_your_datasource_name_here\": my_spark_datasource_config},\n",
					"    store_backend_defaults=InMemoryStoreBackendDefaults()\n",
					")\n",
					"\n",
					"context = BaseDataContext(project_config=project_config)\n",
					"\n",
					""
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"source": [
					"%%pyspark\n",
					"# Create a RuntimeBatchRequest\n",
					"# TODO: Parametireze \n",
					"\n",
					"batch_request = RuntimeBatchRequest(\n",
					"    datasource_name=\"insert_your_datasource_name_here\",\n",
					"    data_connector_name=\"insert_your_runtime_data_connector_name_here\",\n",
					"    data_asset_name=\"insert_your_data_asset_name_here\",\n",
					"    runtime_parameters={\n",
					"      \"batch_data\": df\n",
					"    },\n",
					"    batch_identifiers={\"batch_id\": \"default_identifier\"}\n",
					")\n",
					""
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					"%%pyspark\n",
					"# Create or load your Expectation Suite\n",
					"# NOTE: You should either create or load, this try/except block is for convenience\n",
					"# TODO: Parametirize SUITE\n",
					"# TODO: Validation actions \n",
					"# TODO: custom validators?\n",
					"from great_expectations.exceptions import DataContextError\n",
					"try:\n",
					"  suite = context.create_expectation_suite(\"insert_your_suite_name_here\")\n",
					"except DataContextError:\n",
					"  suite = context.get_expectation_suite(\"insert_your_suite_name_here\")\n",
					"\n",
					"# Get a Validator\n",
					"\n",
					"my_validator = context.get_validator(\n",
					"    batch_request=batch_request,\n",
					"    expectation_suite=suite\n",
					")\n",
					"\n",
					""
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"source": [
					"%%pyspark\n",
					"\n",
					"# Add Expectations\n",
					"\n",
					"my_validator.expect_table_row_count_to_equal(4)\n",
					"my_validator.expect_column_values_to_not_be_null(\"a\")\n",
					"\n",
					"# Save the Expectation Suite to the Expectation Store\n",
					"\n",
					"#my_validator.save_expectation_suite(discard_failed_expectations=False)\n",
					"\n",
					"# TODO: store result to ADLSgen2\n",
					"# TODO: Checkpoints? https://docs.greatexpectations.io/docs/reference/checkpoints_and_actions"
				],
				"execution_count": 34
			}
		]
	}
}